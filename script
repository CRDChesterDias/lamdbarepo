Linux script working as expected
user_data = <<-EOT
              #!/bin/bash
              sudo echo "testhost" > /etc/hostname
              sudo hostnamectl set-hostname testhost

              sudo echo "127.0.0.1 testhost.aws.com testhost" >> /etc/hosts
              sudo hostnamectl set-hostname --static testhost.aws.com

              sudo systemctl restart systemd-networkd
              sudo reboot
              EOT


Windows script has NOT been tested and still needs further finetuning
  user_data = <<-EOT
              <powershell>
              # Set the new hostname
              $newHostname = "testhost"
              # Set the hostname using Rename-Computer
              Rename-Computer -NewName $newHostname -Force
              $DNSSuffix = "abc.com"
              $oldDNSSuffix = (Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\" -Name "NV Domain")."NV Domain"
              #Update primary DNS Suffix for FQDN
              Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\" -Name Domain -Value $DNSSuffix
              Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\" -Name "NV Domain" -Value $DNSSuffix
              </powershell>
       
             EOT


user_data = <<-EOT
              <powershell>
                $newHostname = "testhost"
                $currentHostname = (Get-WmiObject Win32_ComputerSystem).Name
                if ($currentHostname -ne $newHostname) {
                  Rename-Computer -NewName $newHostname -Force
                  Restart-Computer -Force
                }
                else {
                  $hostnamesFile = "C:\DetailedLogs.txt"
                  $currentHostname = (Get-WmiObject Win32_ComputerSystem).Name
                  Get-Content $hostnamesFile | Out-File -FilePath $hostnamesFile -Encoding UTF8
                  Add-Content -Path $hostnamesFile -Value $currentHostname
                  $fileContent = Get-Content $hostnamesFile -Raw
                  if ($fileContent -notlike "*ARC*") {
                      $hostnamesFile = "C:\DetailedLogs.txt"
                      Add-Content -Path $hostnamesFile -Value 'ARC installed'
                    }
                  if ($fileContent -notlike "*NESUS*") {
                      $hostnamesFile = "C:\DetailedLogs.txt"
                      Add-Content -Path $hostnamesFile -Value 'NESUS installed'
                    }
                  }



# Define the username and new password
$username = "UserName" # Replace with the target username
$newPassword = "NewPassword123!" # Replace with the new password

# Convert the new password to a secure string
$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force

# Reset the password
Set-LocalUser -Name $username -Password $securePassword

# Confirm the password reset
Write-Output "Password for user $username has been reset."
                
              </powershell>
              <persist>true</persist>
             EOT


# Define variables
$agentInstallerUrl = "https://amazoncloudwatch-agent.s3.amazonaws.com/windows/amd64/latest/amazon-cloudwatch-agent.msi"
$agentServiceName = "AmazonCloudWatchAgent"

# Download the CloudWatch Agent installers
Write-Output "Downloading CloudWatch Agent installer..."
Invoke-WebRequest -Uri $agentInstallerUrl -OutFile 'C:\amazon-cloudwatch-agent.msi'

Write-Output "CloudWatch Agent installation..."
Start-Process msiexec.exe -ArgumentList "/i `"C:\amazon-cloudwatch-agent.msi`"" -Wait -NoNewWindow
Write-Output "CloudWatch Agent installed..."
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a start -m ec2 -s
Start-Process -FilePath "$extractPath\install.ps1" -ArgumentList "/S" -NoNewWindow -Wait
echo '{"key": "value"}'
